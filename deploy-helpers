#!/bin/bash

# Functions to help with docker deployment.
#
# function deploy rebuilds a dockerfile, pushes the image to docker
# and then pulls the same docker image on a remote host, rebinds the
# nginx config there and restarts nginx.
#
# function remoteDeploy is a helper function for operating on the
# remote host.


# This is the script run on the remote machine
# 
# Call with:
#
# $1  the docker image name, eg: nicferrier/elnode-gnudoc
# $2  the docker exported port which you will connect to nginx
# $3  the nginx config name that you'll connect to
# $4  docker volume mounts, like: "/host:/container+/host:/container"
function remoteDeploy {
    local dockerImage=$1
    local dockerExPort=$2
    local nginxConfig=$3
    local dockerVolumes=$4

    [ -x /etc/init.d/nginx ] || { echo "no nginx?" >&2 ; return 1; }
    [ -x $(which jq) ] || { echo "no jq?" >&2 ; return 1; }
    [ -x $(which docker || which docker.io) ] || { echo "no docker?" >&2 ; return 1; }

    local docker="sudo $(which docker || which docker.io)"
    local jq="$(which jq)"
    local stateDir=/tmp/ddctrl/$(echo $dockerImage | sed -rne "s|/|__|pg")

    # FIXME: this is not a great way to identify the current
    # container... we could ask nginx?
    local containerId=$($docker ps | grep $dockerImage | cut -d ' ' -f 1 | head -n1)
    
    function daemon {
        echo "inside daemon"
        local ETAG=$(date '+%Y%m%d%H%M%S%N')

        # Daemon stuff
        mkdir -p $stateDir
        [ -f $stateDir/pid ] && mv $stateDir/pid $stateDir/old.pid.$(date '+%Y%m%d-%H%M-%S')
        echo $$ > $stateDir/pid
        exec 3>&-   # close stdin
        exec 2>>$stateDir/stderr
        exec 1>>$stateDir/stdout
        echo $(date) daemonized

        # Setup the fifo if it doesn't exist
        local fifo=$stateDir/fifo
        [ -p $fifo ] || mkfifo $fifo

        # Check docker volume mounts and turn them into docker opts
        [ -z $dockerVolumes ] || {
            echo $dockerVolumes | tr '+' '\n' | tr ':' ' ' | while read host container
            do
                [ -d $host ] || { echo "$host should be a directory and isn't" >&2 ; return 1; }
            done

            # Everything ok? make a valid docker options string
            dockerVolumes=$(echo $dockerVolumes | sed -rne 's/^|\+/ -v /pg')
        }

        # Now the library of functions we need
        function containerToHost {
            local containerIdent=$1
            $docker inspect $containerIdent | jq -r '.[0] | .NetworkSettings.IPAddress'
        }

        function curlCheck {
            local containerIp=$1
            local port=$2
            local connectTimeout=${3:-20}
            local timeout=$(expr $connectTimeout + 10)
            local output=""
            local curlResult=0
            local awkResult=0
            local http=$stateDir/httpout
            curl -i -m $timeout \
                --connect-timeout $connectTimeout \
                http://$containerIp:$port 2> /dev/null > $http
            curlResult=$?
            local tries=0
            while [[ $curlResult -eq 7 && $tries < 3 ]] # if it was connect fail try again
            do
                sleep 1
                curl -i -m $timeout \
                    --connect-timeout $connectTimeout \
                    http://$containerIp:$port 2> /dev/null > $http
                curlResult=$?
                tries=$(expr $tries + 1)
            done
            output=$(awk 'BEGIN { lastline="start"; }
/^HTTP[/]1.1 [45]0[0-9]/ { print $0; exit(9); }
/<[Hh]1>Server error<[/][Hh]1>/ { print $0; exit(9); }
{ gsub("[\r\n]$", ""); }
lastline=="" { print $0; exit(0); }
{ lastline=$0; }' $http)
            awkResult=$?
            if [ $curlResult -ne 0 ]
            then
                echo ">>> [$curlResult]"
                cat $http
                echo "<<<"
            fi
            local returnResult=$(($curlResult||$awkResult))
            echo "$(date) curlCheck $containerIp $port $connectTimeout $timeout => [$output] [$returnResult]"
            return $returnResult
        }

        function nginx {
            local newIp=$1
            local upstreams=0

            grep "upstream" $nginxConfig > /dev/null
            upstreams=$?
            if [ $upstreams -eq 0 ]
            then
                sudo sed -ibk \
                    -re "s|server [^:;]*:[0-9]+|server ${newIp}:${dockerExPort}|" $nginxConfig
            else
                sudo sed -ibk \
                    -re "s|proxy_pass http://[^:;]*:[0-9]+|proxy_pass http://$newIp:${dockerExPort}|" $nginxConfig
            fi        
            echo "$(date) nginx $nginxConfig upstreams=$upstreams"
            sudo /etc/init.d/nginx reload
        }

        function dockerRun {
            $docker run -d --env ETAG=${ETAG} ${dockerVolumes} -t $dockerImage
        }

        function dockerStart {
            local newContainerId=$(dockerRun)
            local newIp=$(containerToHost $newContainerId)
            echo $(date) dockerStart newIp: $newIp newContainerId: $newContainerId
            sleep 3
            curlCheck $newIp $dockerExPort 450 && nginx $newIp
            [ $? -eq 0 ] && containerId=$newContainerId
        }

        function dockerClean {
            local newIp=$(containerToHost $containerId)
            $docker ps -q |  while read dockId
            do 
                ( $docker inspect -f '{{ .Config.Image }}' $dockId \
                    | grep $dockerImage > /dev/null ) && echo $dockId
            done | while read dockId 
            do
                # $dockId is a $dockerImage container
                printf "$dockId " 
                $docker inspect $dockId | $jq -r '.[0] | .NetworkSettings.IPAddress'
            done | while read dockId ipAddress
            do
                echo "$(date) dockerClean $newIp $dockId $ipAddress"
                # Now we have the dockId and the ipAddress
                [ "$newIp" != "$ipAddress" ] && {
                    # killing $dockId because it's not on $newIp
                    $docker kill $dockId;
                }
            done
        }

        function dockerRestart {
            echo $(date) dockerRestart
            dockerStart
            dockerClean
        }

        function dockerCheck {
            echo "$(date) dockerCheck [$containerId]"
            [ "$containerId" == "" ] && dockerRestart
            local containerIp=$(containerToHost $containerId)
            curlCheck $containerIp $dockerExPort 10
            if [ $? -ne 0 ]
            then
                 dockerRestart
            else
                echo "$(date) dockerCheck done - all ok"
            fi
        }

        # Daemon loop
        while [ 1 ]
        do
            read -t 30 command args <>$fifo
            case $command in
                run)
                    dockerRun
                    ;;

                start)
                    dockerStart
                    ;;

                check)
                    dockerCheck
                    ;;

                stop)
                    break
                    ;;

                pull)
                    sudo docker pull $dockerImage
                    ;;

                restart)
                    dockerRestart
                    ;;
                
                help)
                    echo $dockerImage control daemon
                    echo "command: start|stop|help|pull|run|check to $fifo"
                    ;;
            esac
            
            # Check every now and then... maybe this needs to be a separate daemon?
            dockerCheck
        done

        # Must be exiting?
        mv $stateDir/pid $stateDir/old.pid.$(date '+%Y%m%d-%H%M-%S')
    }

    function daemonCheck {
        [ -f $stateDir/pid ] && ps -$(cat $stateDir/pid) > /dev/null
    }

    daemonCheck
    [ $? -ne 0 ] || { 
        echo "daemon already running";
        echo stop > $stateDir/fifo; 
    }

    daemon &
    sudo docker pull $dockerImage # by the time this has finished we've got the daemon up
    echo restart > $stateDir/fifo
}


# Function to the initial deploy
# 
# Call with:
#
# $1  the command, either "build" (just builds the docker)
#       or "push"  (builds and pushes to remote but doesn't restart)
#       or "deploy", the default, which builds, pushes and restarts
# $2  the docker image name to build
# $3  the docker exported port to connect to
# $4  the nginx config to hack on the remote
# $5  the host name of the remote
# $6  the volumes to be mounted separated by +
function deploy {
    [ -x $(which docker || which docker.io) ] || { echo "no docker?" >&2 ; return 1; }
    local docker="sudo $(which docker || which docker.io)"
    
    local command=$1
    local dockerImage=$2
    local dockerExPort=$3
    local nginxConfig=$4
    local hostName=$5
    local dockerVolumes=$6

    if [ "$command" != "remote" ]
    then
        cd $(dirname $0)
        [ -f Dockerfile ] || { echo "no Dockerfile?" >&2  ; return 1; }
        
        $docker build --no-cache -t $dockerImage .
        
        [ "$command" == "build" ] && echo "docker built" >&2 && exit 1
        
        $docker push $dockerImage
        
        [ "$command" == "push" ] && echo "docker pushed to $hostName" >&2 && exit 2
    fi

    # Now the remote parts
    ( typeset -fp remoteDeploy ; \
        echo remoteDeploy $dockerImage $dockerExPort $nginxConfig $dockerVolumes \
        ) | ssh $hostName bash -s
}

# deploy ends here
